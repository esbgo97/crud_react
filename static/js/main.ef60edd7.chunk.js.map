{"version":3,"sources":["ui/partials/Header.js","ui/components/AppTable.js","ui/components/AppForm.js","utils/constants.js","ui/pages/user/UserPage.js","App.js","serviceWorker.js","index.js"],"names":["Header","AppBar","position","Toolbar","Typography","AppTable","this","props","items","cols","TableContainer","Table","size","TableHead","TableRow","TableCell","map","col","i","key","toUpperCase","TableBody","row","username","IconButton","style","color","blue","red","Component","AppForm","state","dataForm","onChangeInput","name","value","setState","renderField","field","type","TextField","label","onChange","ev","target","fullWidth","utils","DateFnsUtils","DatePicker","showTodayButton","val","FormControl","InputLabel","id","Select","labelId","options","opt","MenuItem","title","description","fields","maxWidth","show","onAccept","onCancel","Dialog","open","onClose","onShowModal","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","DATE_FORMATS","UserPage","showForm","dataEdit","users","email","gender","birth","moment","format","onSave","user","Date","toDateString","length","push","Container","Card","padding","Grid","justify","container","item","variant","green","CardContent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ef60edd7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n// import Button from \"@material-ui/core/Button\";\r\n// import IconButton from \"@material-ui/core/IconButton\";\r\n// import MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        {/* <IconButton edge=\"start\">\r\n          <MenuIcon />\r\n        </IconButton> */}\r\n        <Typography>Users Demo App</Typography>\r\n        {/* <Button color=\"inherit\">Login</Button> */}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\n// import TablePagination from \"@material-ui/core/TablePagination\";\r\n// import TableFooter from \"@material-ui/core/TableFooter\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { red, blue } from \"@material-ui/core/colors\";\r\n\r\nexport default class AppTable extends Component {\r\n  render() {\r\n    const { items, cols } = this.props;\r\n    return (\r\n      <TableContainer>\r\n        <Table size=\"small\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>ACTIONS</TableCell>\r\n              {cols.map((col, i) => (\r\n                <TableCell key={i}>{col.toUpperCase()}</TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {items.map((row) => (\r\n              <TableRow key={row.username}>\r\n                <TableCell>\r\n                  <IconButton>\r\n                    <EditIcon style={{ color: blue[500] }} />\r\n                  </IconButton>\r\n                  <IconButton>\r\n                    <DeleteIcon style={{ color: red[500] }} />\r\n                  </IconButton>\r\n                </TableCell>\r\n                {cols.map((col, i) => (\r\n                  <TableCell key={i}>{row[col]}</TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n          {/* <TableFooter>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25, { label: \"All\", value: -1 }]}\r\n              colSpan={items.length + 1}\r\n              count={items.length}\r\n              rowsPerPage={5}\r\n              page={0}\r\n              onChangePage={() => {}}\r\n              onChangeRowsPerPage={() => {}}\r\n            />\r\n          </TableFooter> */}\r\n        </Table>\r\n      </TableContainer>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"date-fns\";\r\n\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { MuiPickersUtilsProvider, DatePicker } from \"@material-ui/pickers\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nexport default class AppForm extends Component {\r\n  state = {\r\n    dataForm: {},\r\n  };\r\n\r\n  onChangeInput = (name, value) => {\r\n    let dataForm = this.state.dataForm;\r\n    dataForm[name] = value;\r\n    this.setState({ dataForm });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      title,\r\n      description,\r\n      fields,\r\n      maxWidth,\r\n      show,\r\n      onAccept,\r\n      onCancel,\r\n    } = this.props;\r\n\r\n    const { dataForm } = this.state;\r\n\r\n    return (\r\n      <Dialog\r\n        open={show}\r\n        onClose={this.onShowModal}\r\n        maxWidth={maxWidth ?? \"lg\"}\r\n      >\r\n        <DialogTitle>{title}</DialogTitle>\r\n\r\n        <DialogContent>\r\n          {description && <DialogContentText>{description}</DialogContentText>}\r\n          {fields.map((field, i) => (\r\n            <div key={i}>\r\n              {this.renderField(field, i)}\r\n              <br />\r\n            </div>\r\n          ))}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => onAccept(dataForm)} color=\"primary\">\r\n            ACCEPT\r\n          </Button>\r\n          <Button onClick={onCancel} color=\"secondary\">\r\n            CANCEL\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n\r\n  renderField = (field) => {\r\n    switch (field.type) {\r\n      case \"text\":\r\n      case \"email\":\r\n      case \"number\":\r\n        return (\r\n          <TextField\r\n            label={field.label}\r\n            name={field.name}\r\n            type={field.type}\r\n            onChange={(ev) => this.onChangeInput(field.name, ev.target.value)}\r\n            fullWidth\r\n          />\r\n        );\r\n      case \"date\":\r\n        return (\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <DatePicker\r\n              label={field.label}\r\n              name={field.name}\r\n              showTodayButton\r\n              fullWidth\r\n              onChange={(val) => this.onChangeInput(field.name, val)}\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n        );\r\n      case \"select\":\r\n        return (\r\n          <FormControl fullWidth>\r\n            <InputLabel id={\"slt\" + field.name}>{field.label}</InputLabel>\r\n            <Select\r\n              labelId={\"slt\" + field.name}\r\n              name={field.name}\r\n              onChange={(ev) => this.onChangeInput(field.name, ev.target.value)}\r\n              value={field.options[0]}\r\n            >\r\n              {field.options.map((opt) => (\r\n                <MenuItem value={opt} key={opt}>\r\n                  {opt}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        );\r\n      default:\r\n        return <span>Not defined {field.type}</span>;\r\n    }\r\n  };\r\n}\r\n","export const DATE_FORMATS = {\r\n  default: \"DD-MM-YYYY\",\r\n};\r\n","import React, { Component } from \"react\";\r\nimport moment from \"moment\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\nimport AppTable from \"../../components/AppTable\";\r\nimport AppForm from \"../../components/AppForm\";\r\nimport { green } from \"@material-ui/core/colors\";\r\n\r\nimport { DATE_FORMATS } from \"../../../utils/constants\";\r\nexport default class UserPage extends Component {\r\n  //   userService = new UserService();\r\n  state = {\r\n    showForm: false,\r\n    dataEdit: null,\r\n    users: [\r\n      {\r\n        id: 1,\r\n        username: \"edw\",\r\n        email: \"ebustos@gmail.com\",\r\n        gender: \"Male\",\r\n        birth: moment().format(DATE_FORMATS.default),\r\n      },\r\n      {\r\n        id: 2,\r\n        username: \"nata\",\r\n        email: \"nata@gmail.com\",\r\n        gender: \"Female\",\r\n        birth: moment().format(DATE_FORMATS.default),\r\n      },\r\n    ],\r\n  };\r\n\r\n  onSave = (user) => {\r\n    let users = this.state.users;\r\n    user.birth = new Date().toDateString();\r\n    user.id = users.length + 1;\r\n    users.push(user);\r\n    this.setState({\r\n      users,\r\n      showForm: false,\r\n    });\r\n  };\r\n\r\n  onShowModal = () => {\r\n    this.setState({ showForm: true });\r\n  };\r\n  onCancel = () => {\r\n    this.setState({ showForm: false });\r\n  };\r\n\r\n  render() {\r\n    const { users, showForm } = this.state;\r\n    const fields = [\r\n      { label: \"Username\", name: \"username\", type: \"text\" },\r\n      { label: \"Email\", name: \"email\", type: \"email\" },\r\n      { label: \"Birth\", name: \"birth\", type: \"date\" },\r\n      {\r\n        label: \"Gender\",\r\n        name: \"gender\",\r\n        type: \"select\",\r\n        options: [\"Indeterminate\", \"Male\", \"Female\"],\r\n      },\r\n    ];\r\n    const cols = [\"id\", \"username\", \"email\", \"birth\", \"gender\"];\r\n    return (\r\n      <Container>\r\n        <Card style={{ padding: 10 }}>\r\n          <Grid justify=\"space-between\" container>\r\n            <Grid item>\r\n              <Typography variant=\"h4\" color=\"primary\">\r\n                User List\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <IconButton onClick={this.onShowModal}>\r\n                <AddIcon style={{ color: green[500] }} />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n          <CardContent>\r\n            <AppTable\r\n              title=\"User List\"\r\n              description=\"Current Users registered on the App\"\r\n              items={users}\r\n              cols={cols}\r\n            />\r\n          </CardContent>\r\n        </Card>\r\n        <AppForm\r\n          show={showForm}\r\n          title=\"User Form\"\r\n          description=\"Complete the form to create a new user.\"\r\n          fields={fields}\r\n          onAccept={this.onSave}\r\n          onCancel={this.onCancel}\r\n        />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Header } from \"./ui/partials\";\nimport UserPage from \"./ui/pages/user/UserPage\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <br />\n      <UserPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}